#version 450

layout(constant_id = 0) const int WORK_GROUP_AXIS_SIZE = 16;
layout(constant_id = 1) const int WINDOW_R = 1;

layout(local_size_x_id = 0, local_size_y_id = 0, local_size_z = 1) in;

layout(push_constant) uniform params_t
{
    uvec2 resolution;
    float gamma;
    float t;
} params;

layout(binding = 0) uniform sampler2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * WINDOW_R;
shared vec3 window[WINDOW_LEN][WINDOW_LEN];

vec3 rgb2ycbcr(vec3 rgb) 
{   
    vec3 ycbcr;
    ycbcr.x = 0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;
    ycbcr.y = -0.1146 * rgb.r - 0.3854 * rgb.g + 0.5 * rgb.b;
    ycbcr.z = 0.5 * rgb.r - 0.4542 * rgb.g - 0.0458 * rgb.b;
    return ycbcr;
}

vec3 ycbcr2rgb(vec3 ycbcr) 
{
    vec3 rgb;
    rgb.x = ycbcr.x + 1.5748 * ycbcr.z;
    rgb.y = ycbcr.x - 0.1873 * ycbcr.y - 0.4681 * ycbcr.z;
    rgb.z = ycbcr.x + 1.8556 * ycbcr.y;
    return rgb;
}

void main() {
    int row = int(gl_LocalInvocationIndex / WINDOW_LEN);
    int col = int(gl_LocalInvocationIndex % WINDOW_LEN);
    ivec2 coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
    window[row][col] = rgb2ycbcr(textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb);

    int idx = int(gl_LocalInvocationIndex + WORK_GROUP_AXIS_SIZE * WORK_GROUP_AXIS_SIZE);
    if (idx < WINDOW_LEN * WINDOW_LEN)
    {
        row = idx / WINDOW_LEN;
        col = idx % WINDOW_LEN;
        coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
        window[row][col] = rgb2ycbcr(textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb);
    }

    if (WORK_GROUP_AXIS_SIZE == 8)
    {
        idx += WORK_GROUP_AXIS_SIZE * WORK_GROUP_AXIS_SIZE;
        if (idx < WINDOW_LEN * WINDOW_LEN)
        {
            row = idx / WINDOW_LEN;
            col = idx % WINDOW_LEN;
            coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
            window[row][col] = rgb2ycbcr(textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb);
        }
    }

    barrier();

    if (all(lessThan(gl_GlobalInvocationID.xy, params.resolution))) {
        coord = ivec2(gl_LocalInvocationID.xy) + WINDOW_R;

        vec3 mean = vec3(0);
        vec3 sigma = vec3(0);

        for (int i = -WINDOW_R; i <= WINDOW_R; ++i)
        {
            for (int j = -WINDOW_R; j <= WINDOW_R; ++j)
            {
                mean += window[coord.y + i][coord.x + j];
                sigma += window[coord.y + i][coord.x + j] * window[coord.y + i][coord.x + j];
            }
        }

        const float d = (2 * WINDOW_R + 1) * (2 * WINDOW_R + 1);
        mean /= d;
        sigma = sqrt(sigma / d - mean * mean);

        vec3 minC = mean - params.gamma * sigma;
        vec3 maxC = mean + params.gamma * sigma;
        
        imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(ycbcr2rgb(mix(minC, maxC, params.t)), 1.0));
    }
}